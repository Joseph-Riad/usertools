#!/usr/bin/perl 
#===============================================================================
#
#         FILE: groupdel
#
#        USAGE: See man 8 groupdel
#
#  DESCRIPTION: 
#
#      OPTIONS: ---
# REQUIREMENTS: In addition to the requirements of useradd, it needs Proc::ProcessTable
#         BUGS: ---
#        NOTES: ---
#       AUTHOR: Joseph Riad (joseph.samy.albert@gmail.com), 
#      COMPANY: 
#      VERSION: 1.0
#      CREATED: 07/30/2014 03:40 AM
#     REVISION: ---
#===============================================================================

use strict;
use warnings;
use Getopt::Long;
use File::Path qw(remove_tree);
use File::Spec; 
use Tie::File;

our %options;

# Bail out early unless root is running the script:
die "Sorry, this script must be run as root!\n" unless ( $> == 0 && $< == 0 && $( == 0 && $) == 0 );

#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# Initialization
#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

Getopt::Long::Configure( qw(
	no_ignore_case
	bundling
	permute
    )
);

my @option_pairs = qw(
					h help
					R root
				);

# Initialize options:
for my $option (@option_pairs){
		$options{$option} = undef
}

our %config_files;
our %synonyms = @option_pairs;

my $logindefs_file = '/etc/login.defs';
$config_files{$logindefs_file} = undef;

use UtilitySubs;

#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# Main Program
#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

&install_synonyms;
&parse_command_line;
my $group = shift @ARGV;  # The log in name is the last thing left after
                          # the command line is parsed.
&obtain_option_defaults;  # Obtain defaults for options not specified.
                          # Default behaviors are documented in groupdel(8)
my $kadm = &build_kadm_object;

&validate_group;
&check_if_we_can_proceed;
&obtain_krb_creds;
my $ldap_bind = &bind_to_ldap_server;
&rm_ldap_entry;
&destroy_krb_creds;

#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# Subroutines
#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

#-------------------------------------------------------------------------------
#
# parse_command_line
# Calls GetOptions to parse command line options and call the appropriate
# handle for each option.
#
#-------------------------------------------------------------------------------

sub parse_command_line{
    GetOptions(
		         'f'               => \&handle_option,
				 'force'           => \&handle_option,
				 'h'               => \&handle_option,
				 'help'            => \&handle_option,
			     'R=s'             => \&handle_option,
				 'root=s'          => \&handle_option,
                 'unsupported'     => \&handle_option,
				 'keytab=s'        => \&handle_option,
				 'principal=s'     => \&handle_option,
				 'realm=s'         => \&handle_option,
				 'server=s'        => \&handle_option,
				 'base=s'          => \&handle_option,
			);
}

#-------------------------------------------------------------------------------
#
# Option handlers
# Subroutines returning $_[1] simply leave their option's value unchanged
# Subroutines returning 1 simply assert the presence of a flag
#
#-------------------------------------------------------------------------------

sub handle_h ($;$){
	my $script_name = $0;
	$script_name =~ s{.*/}{}; # Keep the basename only
	my $help_header = <<EOI;
Usage: (copied from man 8 $script_name) 
   $script_name [options] LOGIN
Options: (ported from $script_name)
EOI
  my %help_text = (
    h => ', --help                    display this help message and exit',
	R => ', --root CHROOT_DIR         directory to chroot into',
  );
  my $help_body = '';
  for my $option (grep { length($_) == 1 && supported $_} sort { lc $a cmp lc $b } keys %options){
  	$help_body .= "  -$option$help_text{$option}\n";
  }
  $help_body .= &add_common_help_message; # Additional options for LDAP and Kerberos
  warn $help_header . $help_body;
  exit 0;
}

#-------------------------------------------------------------------------------
#
# validate_group
# Dies if the supplied group name doesn't exist in the LDAP database.
#
#-------------------------------------------------------------------------------


sub validate_group {
	my $is_in_ldap = getgrnam $group;
	if(not $is_in_ldap){
		die "groupdel: group '$group' does not exist\n";
	}
}

#-------------------------------------------------------------------------------
#
# rm_ldap_entry
# Remove group entry from LDAP database
#
#-------------------------------------------------------------------------------

sub rm_ldap_entry{
	my $dn = "cn=$group,$options{base}";
	my $result = $ldap_bind->delete($dn);
	$result->code && warn "Failed to delete LDAP entry for group $group. ".$result->error;
}

#-------------------------------------------------------------------------------
#
# check_if_we_can_proceed
# Does nothing if the user account can be deleted safely. Dies with a helpful
# message otherwise.
#
#-------------------------------------------------------------------------------

sub check_if_we_can_proceed{
	my @entry;
	while(@entry = getpwent){
		my $user  = $entry[0];
		my $gid = $entry[3];
		my $grnam = getgrgid $gid;
		die "groupdel: cannot remove the primary group of user '$user'\n"
		    if $grnam eq $group;
	}
	1
}
